{"data": {"repository": {"vulnerabilityAlerts": {"nodes": [{"id": "MDI4OlJlcG9zaXRvcnlWdWxuZXJhYmlsaXR5QWxlcnQxODI0ODkwNjg=", "vulnerableRequirements": "= 2.2.3", "securityVulnerability": {"severity": "LOW", "advisory": {"permalink": "https://github.com/advisories/GHSA-c3gv-9cxf-6f57", "references": [{"url": "https://nvd.nist.gov/vuln/detail/CVE-2019-15587"}, {"url": "https://github.com/advisories/GHSA-c3gv-9cxf-6f57"}], "severity": "LOW", "description": "In the Loofah gem for Ruby through v2.3.0 unsanitized JavaScript may occur in sanitized output when a crafted SVG element is republished.", "databaseId": 1752, "ghsaId": "GHSA-c3gv-9cxf-6f57", "summary": "Unsanitized JavaScript may occur in sanitized output when a crafted SVG element is republished"}, "package": {"ecosystem": "RUBYGEMS", "name": "loofah"}, "updatedAt": "2019-10-24T20:44:30Z", "vulnerableVersionRange": "< 2.3.1"}}, {"id": "MDI4OlJlcG9zaXRvcnlWdWxuZXJhYmlsaXR5QWxlcnQxOTU2MjY1NTQ=", "vulnerableRequirements": "= 3.12.1", "securityVulnerability": {"severity": "MODERATE", "advisory": {"permalink": "https://github.com/advisories/GHSA-7xx3-m584-x994", "references": [{"url": "https://github.com/puma/puma/security/advisories/GHSA-7xx3-m584-x994"}, {"url": "https://nvd.nist.gov/vuln/detail/CVE-2019-16770"}, {"url": "https://github.com/advisories/GHSA-7xx3-m584-x994"}], "severity": "MODERATE", "description": "## Keepalive thread overload/DoS\r\n\r\n### Impact\r\n\r\nA poorly-behaved client could use keepalive requests to monopolize Puma's reactor and create a denial of service attack.\r\n\r\nIf more keepalive connections to Puma are opened than there are threads available, additional connections will wait permanently if the attacker sends requests frequently enough.\r\n\r\n### Patches\r\n\r\nThis vulnerability is patched in Puma 4.3.1 and 3.12.2.\r\n\r\n### Workarounds\r\n\r\nReverse proxies in front of Puma could be configured to always allow less than X keepalive connections to a Puma cluster or process, where X is the number of threads configured in Puma's thread pool.\r\n\r\n### For more information\r\n\r\nIf you have any questions or comments about this advisory:\r\n\r\n* Open an issue at [puma](github.com/puma/puma).\r\n\r\n", "databaseId": 1832, "ghsaId": "GHSA-7xx3-m584-x994", "summary": "A poorly-behaved client could use keepalive requests to monopolize Puma's reactor and create a denial of service attack"}, "package": {"ecosystem": "RUBYGEMS", "name": "puma"}, "updatedAt": "2019-12-05T19:25:16Z", "vulnerableVersionRange": "< 3.12.2"}}, {"id": "MDI4OlJlcG9zaXRvcnlWdWxuZXJhYmlsaXR5QWxlcnQyMDMxNTcyODE=", "vulnerableRequirements": "= 2.0.7", "securityVulnerability": {"severity": "LOW", "advisory": {"permalink": "https://github.com/advisories/GHSA-hrqr-hxpp-chr3", "references": [{"url": "https://github.com/rack/rack/security/advisories/GHSA-hrqr-hxpp-chr3"}, {"url": "https://nvd.nist.gov/vuln/detail/CVE-2019-16782"}, {"url": "https://github.com/advisories/GHSA-hrqr-hxpp-chr3"}], "severity": "LOW", "description": "There's a possible information leak / session hijack vulnerability in Rack. Attackers may be able to find and hijack sessions by using timing attacks targeting the session id. Session ids are usually stored and indexed in a database that uses some kind of scheme for speeding up lookups of that session id. By carefully measuring the amount of time it takes to look up a session, an attacker may be able to find a valid session id and hijack the session.\n\nThe session id itself may be generated randomly, but the way the session is indexed by the backing store does not use a secure comparison.\n\n### Impact\n\nThe session id stored in a cookie is the same id that is used when querying the backing session storage engine.  Most storage mechanisms (for example a database) use some sort of indexing in order to speed up the lookup of that id.  By carefully timing requests and session lookup failures, an attacker may be able to perform a timing attack to determine an existing session id and hijack that session.\n\n## Releases\n\nThe 1.6.12 and 2.0.8 releases are available at the normal locations.\n\n### Workarounds\n\nThere are no known workarounds.\n\n### Patches\n\nTo aid users who aren't able to upgrade immediately we have provided patches for\nthe two supported release series. They are in git-am format and consist of a\nsingle changeset.\n\n* 1-6-session-timing-attack.patch - Patch for 1.6 series\n* 2-0-session-timing-attack.patch - Patch for 2.6 series\n\n### Credits\n\nThanks Will Leinweber for reporting this!", "databaseId": 1849, "ghsaId": "GHSA-hrqr-hxpp-chr3", "summary": "Possible Information Leak / Session Hijack Vulnerability in Rack"}, "package": {"ecosystem": "RUBYGEMS", "name": "rack"}, "updatedAt": "2019-12-18T19:01:10Z", "vulnerableVersionRange": ">= 2.0.0, < 2.0.8"}}, {"id": "MDI4OlJlcG9zaXRvcnlWdWxuZXJhYmlsaXR5QWxlcnQyMjQxMjUzMTU=", "vulnerableRequirements": "= 1.10.4", "securityVulnerability": {"severity": "MODERATE", "advisory": {"permalink": "https://github.com/advisories/GHSA-7553-jr98-vx47", "references": [{"url": "https://nvd.nist.gov/vuln/detail/CVE-2020-7595"}, {"url": "https://github.com/advisories/GHSA-7553-jr98-vx47"}], "severity": "MODERATE", "description": "xmlStringLenDecodeEntities in parser.c in libxml2 2.9.10 has an infinite loop in a certain end-of-file situation.\nThe Nokogiri RubyGem has patched it&#39;s vendored copy of libxml2 in order to prevent this issue from affecting nokogiri.", "databaseId": 1931, "ghsaId": "GHSA-7553-jr98-vx47", "summary": "libxml as used in Nokogiri has an infinite loop in a certain end-of-file situation"}, "package": {"ecosystem": "RUBYGEMS", "name": "nokogiri"}, "updatedAt": "2020-02-18T18:58:19Z", "vulnerableVersionRange": "< 1.10.8"}}, {"id": "MDI4OlJlcG9zaXRvcnlWdWxuZXJhYmlsaXR5QWxlcnQyMjU5MjI1NTU=", "vulnerableRequirements": "= 3.12.1", "securityVulnerability": {"severity": "MODERATE", "advisory": {"permalink": "https://github.com/advisories/GHSA-84j7-475p-hp8v", "references": [{"url": "https://github.com/puma/puma/security/advisories/GHSA-84j7-475p-hp8v"}, {"url": "https://nvd.nist.gov/vuln/detail/CVE-2020-5247"}, {"url": "https://github.com/advisories/GHSA-84j7-475p-hp8v"}], "severity": "MODERATE", "description": "In Puma (RubyGem) before 4.3.2 and 3.12.3, if an application using Puma allows untrusted input in a response header,\nan attacker can use newline characters (i.e. `CR`, `LF` or`/r`, `/n`) to end the header and inject malicious content, \nsuch as additional headers or an entirely new response body. This vulnerability is known as HTTP Response Splitting.\n\nWhile not an attack in itself, response splitting is a vector for several other attacks, such as cross-site scripting (XSS).\n\nThis is related to CVE-2019-16254, which fixed this vulnerability for the WEBrick Ruby web server.\n\nThis has been fixed in versions 4.3.2 and 3.12.3 by checking all headers for line endings and rejecting headers with those characters.  ", "databaseId": 1964, "ghsaId": "GHSA-84j7-475p-hp8v", "summary": "HTTP Response Splitting in Puma"}, "package": {"ecosystem": "RUBYGEMS", "name": "puma"}, "updatedAt": "2020-03-02T17:11:31Z", "vulnerableVersionRange": "< 3.12.3"}}, {"id": "MDI4OlJlcG9zaXRvcnlWdWxuZXJhYmlsaXR5QWxlcnQyMjgwMTUxMzA=", "vulnerableRequirements": "= 3.12.1", "securityVulnerability": {"severity": "MODERATE", "advisory": {"permalink": "https://github.com/advisories/GHSA-33vf-4xgg-9r58", "references": [{"url": "https://github.com/puma/puma/security/advisories/GHSA-33vf-4xgg-9r58"}, {"url": "https://nvd.nist.gov/vuln/detail/CVE-2020-5249"}, {"url": "https://github.com/advisories/GHSA-33vf-4xgg-9r58"}], "severity": "MODERATE", "description": "### Impact\nIf an application using Puma allows untrusted input in an early-hints header, an attacker can use a carriage return character to end the header and inject malicious content, such as additional headers or an entirely new response body. This vulnerability is known as [HTTP Response Splitting](https://owasp.org/www-community/attacks/HTTP_Response_Splitting)\n\nWhile not an attack in itself, response splitting is a vector for several other attacks, such as cross-site scripting (XSS).\n\nThis is related to [CVE-2020-5247](https://github.com/puma/puma/security/advisories/GHSA-84j7-475p-hp8v), which fixed this vulnerability but only for regular responses.\n\n### Patches\nThis has been fixed in 4.3.3 and 3.12.4.\n\n### Workarounds\nUsers can not allow untrusted/user input in the Early Hints response header.\n\n### For more information\nIf you have any questions or comments about this advisory:\n* Open an issue in [puma](https://github.com/puma/puma)\n* Email us a project maintainer. [Email addresses are listed in our Code of Conduct](https://github.com/puma/puma/blob/master/CODE_OF_CONDUCT.md#enforcement).", "databaseId": 1965, "ghsaId": "GHSA-33vf-4xgg-9r58", "summary": "HTTP Response Splitting (Early Hints) in Puma"}, "package": {"ecosystem": "RUBYGEMS", "name": "puma"}, "updatedAt": "2020-03-02T15:03:15Z", "vulnerableVersionRange": "< 3.12.4"}}, {"id": "MDI4OlJlcG9zaXRvcnlWdWxuZXJhYmlsaXR5QWxlcnQyNDE4OTI1MTY=", "vulnerableRequirements": "= 5.2.3", "securityVulnerability": {"severity": "MODERATE", "advisory": {"permalink": "https://github.com/advisories/GHSA-65cv-r6x7-79hv", "references": [{"url": "https://github.com/rails/rails/security/advisories/GHSA-65cv-r6x7-79hv"}, {"url": "https://nvd.nist.gov/vuln/detail/CVE-2020-5267"}, {"url": "https://github.com/advisories/GHSA-65cv-r6x7-79hv"}], "severity": "MODERATE", "description": "There is a possible XSS vulnerability in ActionView's JavaScript literal escape helpers.  Views that use the `j` or `escape_javascript` methods may be susceptible to XSS attacks.\n\n### Impact\n\nThere is a possible XSS vulnerability in the `j` and `escape_javascript` methods in ActionView.  These methods are used for escaping JavaScript string literals.  Impacted code will look something like this:\n\n```erb\n<script>let a = `<%= j unknown_input %>`</script>\n```\n\nor\n\n```erb\n<script>let a = `<%= escape_javascript unknown_input %>`</script>\n```\n\n### Releases\n\nThe 6.0.2.2 and 5.2.4.2 releases are available at the normal locations.\n\n### Workarounds\n\nFor those that can't upgrade, the following monkey patch may be used:\n\n```ruby\nActionView::Helpers::JavaScriptHelper::JS_ESCAPE_MAP.merge!(\n  {\n    \"`\" => \"\\\\`\",\n    \"$\" => \"\\\\$\"\n  }\n)\n\nmodule ActionView::Helpers::JavaScriptHelper\n  alias :old_ej :escape_javascript\n  alias :old_j :j\n\n  def escape_javascript(javascript)\n    javascript = javascript.to_s\n    if javascript.empty?\n      result = \"\"\n    else\n      result = javascript.gsub(/(\\\\|<\\/|\\r\\n|\\342\\200\\250|\\342\\200\\251|[\\n\\r\"']|[`]|[$])/u, JS_ESCAPE_MAP)\n    end\n    javascript.html_safe? ? result.html_safe : result\n  end\n\n  alias :j :escape_javascript\nend\n```\n\n### Patches\n\nTo aid users who aren't able to upgrade immediately we have provided patches for\nthe two supported release series. They are in git-am format and consist of a\nsingle changeset.\n\n* [5-2-js-helper-xss.patch](https://gist.github.com/tenderlove/c042ff49f0347c37e99183a6502accc6#file-5-2-js-helper-xss-patch) - Patch for 5.2 series\n* [6-0-js-helper-xss.patch](https://gist.github.com/tenderlove/c042ff49f0347c37e99183a6502accc6#file-6-0-js-helper-xss-patch) - Patch for 6.0 series\n\nPlease note that only the 5.2 and 6.0 series are supported at present. Users\nof earlier unsupported releases are advised to upgrade as soon as possible as we\ncannot guarantee the continued availability of security fixes for unsupported\nreleases.\n\n### Credits\n\nThanks to Jesse Campos from Chef Secure", "databaseId": 1996, "ghsaId": "GHSA-65cv-r6x7-79hv", "summary": "Possible XSS vulnerability in ActionView"}, "package": {"ecosystem": "RUBYGEMS", "name": "actionview"}, "updatedAt": "2020-03-30T23:36:27Z", "vulnerableVersionRange": "<= 5.2.4.1"}}, {"id": "MDI4OlJlcG9zaXRvcnlWdWxuZXJhYmlsaXR5QWxlcnQyOTgwNzA4MDM=", "vulnerableRequirements": "= 5.2.3", "securityVulnerability": {"severity": "LOW", "advisory": {"permalink": "https://github.com/advisories/GHSA-m42x-37p3-fv5w", "references": [{"url": "https://weblog.rubyonrails.org/2020/5/18/Rails-5-2-4-3-and-6-0-3-1-have-been-released/"}, {"url": "https://nvd.nist.gov/vuln/detail/CVE-2020-8162"}, {"url": "https://github.com/advisories/GHSA-m42x-37p3-fv5w"}], "severity": "LOW", "description": "There is a vulnerability in ActiveStorage's S3 adapter that allows the Content-Length of a\r\ndirect file upload to be modified by an end user.\r\n\r\nImpact\r\n------\r\n\r\nUtilizing this vulnerability, an attacker can control the Content-Length of an S3 direct upload URL without receiving a\r\nnew signature from the server. This could be used to bypass controls in place on the server to limit upload size.\r\n\r\nWorkarounds\r\n-----------\r\n\r\nThis is a low-severity security issue. As such, no workaround is necessarily\r\nuntil such time as the application can be upgraded.", "databaseId": 2117, "ghsaId": "GHSA-m42x-37p3-fv5w", "summary": "Circumvention of file size limits in ActiveStorage"}, "package": {"ecosystem": "RUBYGEMS", "name": "activestorage"}, "updatedAt": "2020-05-26T15:06:44Z", "vulnerableVersionRange": ">= 5.0.0, <= 5.2.4.2"}}, {"id": "MDI4OlJlcG9zaXRvcnlWdWxuZXJhYmlsaXR5QWxlcnQyOTg5ODM4MDY=", "vulnerableRequirements": "= 5.2.3", "securityVulnerability": {"severity": "MODERATE", "advisory": {"permalink": "https://github.com/advisories/GHSA-8727-m6gj-mc37", "references": [{"url": "https://weblog.rubyonrails.org/2020/5/18/Rails-5-2-4-3-and-6-0-3-1-have-been-released/"}, {"url": "https://nvd.nist.gov/vuln/detail/CVE-2020-8164"}, {"url": "https://github.com/advisories/GHSA-8727-m6gj-mc37"}], "severity": "MODERATE", "description": "There is a strong parameters bypass vector in ActionPack.\r\n\r\nImpact\r\n------\r\nIn some cases user supplied information can be inadvertently leaked from\r\nStrong Parameters.  Specifically the return value of `each`, or `each_value`,\r\nor `each_pair` will return the underlying \"untrusted\" hash of data that was\r\nread from the parameters.  Applications that use this return value may be\r\ninadvertently use untrusted user input.\r\n\r\nImpacted code will look something like this:\r\n\r\n```\r\ndef update\r\n  # Attacker has included the parameter: `{ is_admin: true }`\r\n  User.update(clean_up_params)\r\nend\r\n\r\ndef clean_up_params\r\n   params.each { |k, v|  SomeModel.check(v) if k == :name }\r\nend\r\n```\r\n\r\nNote the mistaken use of `each` in the `clean_up_params` method in the above\r\nexample.\r\n\r\nWorkarounds\r\n-----------\r\nDo not use the return values of `each`, `each_value`, or `each_pair` in your\r\napplication.", "databaseId": 2118, "ghsaId": "GHSA-8727-m6gj-mc37", "summary": "Possible Strong Parameters Bypass in ActionPack"}, "package": {"ecosystem": "RUBYGEMS", "name": "actionpack"}, "updatedAt": "2020-05-26T15:06:55Z", "vulnerableVersionRange": ">= 5.0.0, <= 5.2.4.2"}}, {"id": "MDI4OlJlcG9zaXRvcnlWdWxuZXJhYmlsaXR5QWxlcnQyOTg5ODM4MDk=", "vulnerableRequirements": "= 5.2.3", "securityVulnerability": {"severity": "LOW", "advisory": {"permalink": "https://github.com/advisories/GHSA-jp5v-5gx4-jmj9", "references": [{"url": "https://github.com/rubysec/ruby-advisory-db/blob/master/gems/actionpack/CVE-2020-8166.yml"}, {"url": "https://nvd.nist.gov/vuln/detail/CVE-2020-8166"}, {"url": "https://github.com/advisories/GHSA-jp5v-5gx4-jmj9"}], "severity": "LOW", "description": "It is possible to possible to, given a global CSRF token such as the one\npresent in the authenticity_token meta tag, forge a per-form CSRF token for\nany action for that session.\n\nImpact\n------\n\nGiven the ability to extract the global CSRF token, an attacker would be able to\nconstruct a per-form CSRF token for that session.\n\nWorkarounds\n-----------\n\nThis is a low-severity security issue. As such, no workaround is necessarily\nuntil such time as the application can be upgraded.", "databaseId": 2119, "ghsaId": "GHSA-jp5v-5gx4-jmj9", "summary": "Ability to forge per-form CSRF tokens in Rails"}, "package": {"ecosystem": "RUBYGEMS", "name": "actionpack"}, "updatedAt": "2020-05-26T15:10:58Z", "vulnerableVersionRange": ">= 5.0.0, <= 5.2.4.2"}}, {"id": "MDI4OlJlcG9zaXRvcnlWdWxuZXJhYmlsaXR5QWxlcnQyOTkwOTAwMTc=", "vulnerableRequirements": "= 5.2.3", "securityVulnerability": {"severity": "HIGH", "advisory": {"permalink": "https://github.com/advisories/GHSA-2p68-f74v-9wc6", "references": [{"url": "https://weblog.rubyonrails.org/2020/5/18/Rails-5-2-4-3-and-6-0-3-1-have-been-released/"}, {"url": "https://nvd.nist.gov/vuln/detail/CVE-2020-8165"}, {"url": "https://github.com/advisories/GHSA-2p68-f74v-9wc6"}], "severity": "HIGH", "description": "In ActiveSupport, there is potentially unexpected behaviour in the MemCacheStore and RedisCacheStore where, when\r\nuntrusted user input is written to the cache store using the `raw: true` parameter, re-reading the result\r\nfrom the cache can evaluate the user input as a Marshalled object instead of plain text. Vulnerable code looks like:\r\n\r\n```\r\ndata = cache.fetch(\"demo\", raw: true) { untrusted_string }\r\n```\r\n  \r\nImpact\r\n------\r\nUnmarshalling of untrusted user input can have impact up to and including RCE. At a minimum,\r\nthis vulnerability allows an attacker to inject untrusted Ruby objects into a web application.\r\nIn addition to upgrading to the latest versions of Rails, developers should ensure that whenever\r\nthey are calling `Rails.cache.fetch` they are using consistent values of the `raw` parameter for both\r\nreading and writing, especially in the case of the RedisCacheStore which does not, prior to these changes,\r\ndetect if data was serialized using the raw option upon deserialization.\r\n\r\nWorkarounds\r\n-----------\r\nIt is recommended that application developers apply the suggested patch or upgrade to the latest release as\r\nsoon as possible. If this is not possible, we recommend ensuring that all user-provided strings cached using\r\nthe `raw` argument should be double-checked to ensure that they conform to the expected format.", "databaseId": 2116, "ghsaId": "GHSA-2p68-f74v-9wc6", "summary": "Unintended unmarshalling in ActiveSupport"}, "package": {"ecosystem": "RUBYGEMS", "name": "activesupport"}, "updatedAt": "2020-05-26T14:47:04Z", "vulnerableVersionRange": ">= 5.0.0, <= 5.2.4.2"}}, {"id": "MDI4OlJlcG9zaXRvcnlWdWxuZXJhYmlsaXR5QWxlcnQzMDA1MjUwOTI=", "vulnerableRequirements": "= 1.1.1", "securityVulnerability": {"severity": "MODERATE", "advisory": {"permalink": "https://github.com/advisories/GHSA-r5jw-62xg-j433", "references": [{"url": "https://github.com/kaminari/kaminari/security/advisories/GHSA-r5jw-62xg-j433"}, {"url": "https://nvd.nist.gov/vuln/detail/CVE-2020-11082"}, {"url": "https://github.com/advisories/GHSA-r5jw-62xg-j433"}], "severity": "MODERATE", "description": "### Impact\nIn Kaminari before 1.2.1, there is a vulnerability that would allow an attacker to inject arbitrary code into pages with pagination links. This has been fixed in 1.2.1.\n\n### Releases\nThe 1.2.1 gem including the patch has already been released.\nAll past released versions are affected by this vulnerability.\n\n### Workarounds\nApplication developers who can't update the gem can workaround by overriding the `PARAM_KEY_EXCEPT_LIST` constant.\n\n```ruby\nmodule Kaminari::Helpers\n  PARAM_KEY_EXCEPT_LIST = [:authenticity_token, :commit, :utf8, :_method, :script_name, :original_script_name].freeze\nend\n```\n\n### Credits\nThanks to Daniel Mircea for finding the issue and sending a patch via GitHub. Also thanks to Aditya Prakash for reporting the vulnerability.", "databaseId": 2123, "ghsaId": "GHSA-r5jw-62xg-j433", "summary": "Cross-Site Scripting in Kaminari"}, "package": {"ecosystem": "RUBYGEMS", "name": "kaminari"}, "updatedAt": "2020-05-28T21:05:33Z", "vulnerableVersionRange": "< 1.2.1"}}, {"id": "MDI4OlJlcG9zaXRvcnlWdWxuZXJhYmlsaXR5QWxlcnQzMDQ1OTU0MjY=", "vulnerableRequirements": "= 0.1.4", "securityVulnerability": {"severity": "MODERATE", "advisory": {"permalink": "https://github.com/advisories/GHSA-g6wq-qcwm-j5g2", "references": [{"url": "https://github.com/faye/websocket-extensions-ruby/security/advisories/GHSA-g6wq-qcwm-j5g2"}, {"url": "https://nvd.nist.gov/vuln/detail/CVE-2020-7663"}, {"url": "https://github.com/advisories/GHSA-g6wq-qcwm-j5g2"}], "severity": "MODERATE", "description": "### Impact\n\nThe ReDoS flaw allows an attacker to exhaust the server's capacity to process\nincoming requests by sending a WebSocket handshake request containing a header\nof the following form:\n\n    Sec-WebSocket-Extensions: a; b=\"\\c\\c\\c\\c\\c\\c\\c\\c\\c\\c ...\n\nThat is, a header containing an unclosed string parameter value whose content is\na repeating two-byte sequence of a backslash and some other character. The\nparser takes exponential time to reject this header as invalid, and this will\nblock the processing of any other work on the same thread. Thus if you are\nrunning a single-threaded server, such a request can render your service\ncompletely unavailable.\n\n### Patches\n\nUsers should upgrade to version 0.1.5.\n\n### Workarounds\n\nThere are no known work-arounds other than disabling any public-facing WebSocket functionality you are operating.\n\n### References\n\n- https://blog.jcoglan.com/2020/06/02/redos-vulnerability-in-websocket-extensions/", "databaseId": 2137, "ghsaId": "GHSA-g6wq-qcwm-j5g2", "summary": "Regular Expression Denial of Service in websocket-extensions (RubyGem)"}, "package": {"ecosystem": "RUBYGEMS", "name": "websocket-extensions"}, "updatedAt": "2020-06-03T23:10:37Z", "vulnerableVersionRange": "< 0.1.5"}}, {"id": "MDI4OlJlcG9zaXRvcnlWdWxuZXJhYmlsaXR5QWxlcnQzMTYwMDUzNjU=", "vulnerableRequirements": "= 2.0.7", "securityVulnerability": {"severity": "HIGH", "advisory": {"permalink": "https://github.com/advisories/GHSA-j6w9-fv6q-3q52", "references": [{"url": "https://nvd.nist.gov/vuln/detail/CVE-2020-8184"}, {"url": "https://github.com/advisories/GHSA-j6w9-fv6q-3q52"}], "severity": "HIGH", "description": "A reliance on cookies without validation/integrity check security vulnerability exists in rack < 2.2.3, rack < 2.1.4 that makes it is possible for an attacker to forge a secure or host-only cookie prefix.", "databaseId": 2195, "ghsaId": "GHSA-j6w9-fv6q-3q52", "summary": "Percent-encoded cookies can be used to overwrite existing prefixed cookie names"}, "package": {"ecosystem": "RUBYGEMS", "name": "rack"}, "updatedAt": "2020-06-24T17:14:38Z", "vulnerableVersionRange": "< 2.1.4"}}]}}}}
